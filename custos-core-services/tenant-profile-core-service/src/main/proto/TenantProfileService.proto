/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.custos.tenant.profile.service;

message Tenant {
    int64 tenant_id = 1;
    string client_name = 2;
    string requester_email = 4;
    string admin_first_name = 5;
    string admin_last_name = 6;
    string admin_email = 7;
    string admin_username = 8;
    string admin_password = 9;
    TenantStatus tenant_status = 10;
    repeated string contacts = 11;
    repeated string redirect_uris = 12;
    string client_uri = 13;
    string scope = 14;
    string domain = 15;
    string comment = 16;
    string logo_uri = 17;
    int64 parent_tenant_id = 18;
    string application_type = 19;
    string token_endpoint_auth_method = 20;
    string jwks_uri = 21;
    string example_extension_parameter = 22;
    string tos_uri = 23;
    string policy_uri = 24;
    map<string, string> jwks = 25;
    string software_id = 26;
    string software_version = 27;
    int64 refesh_token_lifetime = 28;
    string client_id = 29;
}

enum TenantStatus {
    REQUESTED = 0;
    APPROVED = 1;
    DENIED = 2;
    CANCELLED = 3;
    ACTIVE = 4;
    DEACTIVATED = 5;
}

message TenantAttributeUpdateMetadata {
    string updatedAttribute = 1;
    string updatedAttributeValue = 2;
    string updatedBy = 3;
    string updatedAt = 4;
}

message TenantStatusUpdateMetadata {
    TenantStatus updatedStatus = 1;
    string updatedBy = 2;
    string updatedAt = 3;
}


message AddTenantResponse {
    int64 tenantId = 1;
}


message UpdateTenantResponse {
    Tenant tenant = 1;

}

message GetTenantRequest {
    int64 tenantId = 1;
}

message GetTenantResponse {
    Tenant tenant = 1;
}


message GetAllTenantsResponse {
    repeated Tenant tenant = 1;
}

message IsTenantExistRequest {
    int64 tenantId = 1;
}

message IsTenantExistResponse {
    bool isExist = 1;
}

message GetAllTenantsForUserRequest {
    string requesterEmail = 1;
}

message GetAllTenantsForUserResponse {
    repeated Tenant tenant = 1;
}

message UpdateStatusRequest {
    string client_id = 1;
    TenantStatus status = 2;
    string updatedBy = 3;
    int64 tenantId = 4;
    bool super_tenant = 5;
    string accessToken = 6;
}

message UpdateStatusResponse {
    int64 tenantId = 1;
    TenantStatus status = 2;
}

message GetAuditTrailRequest {
    int64 tenantId = 1;
}

message GetStatusUpdateAuditTrailResponse {
    repeated TenantStatusUpdateMetadata metadata = 1;
}

message GetAttributeUpdateAuditTrailResponse {
    repeated TenantAttributeUpdateMetadata metadata = 2;
}

message GetTenantsRequest {
 int32 offset = 1;
 int32 limit = 2;
 int64 parent_id = 3;
 TenantStatus status = 4;
 string requester_email = 5;
 string parent_client_id = 6;
}

service TenantProfileService {
    rpc addTenant (Tenant) returns (Tenant);
    rpc updateTenant (Tenant) returns (Tenant);
    rpc getTenant (GetTenantRequest) returns (GetTenantResponse);
    rpc updateTenantStatus (UpdateStatusRequest) returns (UpdateStatusResponse);
    rpc getAllTenants (GetTenantsRequest) returns (GetAllTenantsResponse);
    rpc isTenantExist (IsTenantExistRequest) returns (IsTenantExistResponse);
    rpc getAllTenantsForUser (GetAllTenantsForUserRequest) returns (GetAllTenantsForUserResponse);
    rpc getTenantStatusUpdateAuditTrail (GetAuditTrailRequest) returns (GetStatusUpdateAuditTrailResponse);
    rpc getTenantAttributeUpdateAuditTrail (GetAuditTrailRequest) returns (GetAttributeUpdateAuditTrailResponse);
}