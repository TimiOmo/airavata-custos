/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.custos.group.management.service;

import "google/api/annotations.proto";
import "UserProfileService.proto";
import "IamAdminService.proto";


service GroupManagementService {

    rpc createGroups (org.apache.custos.iam.service.GroupsRequest) returns (org.apache.custos.iam.service.GroupsResponse) {

        option (google.api.http) = {
           post: "/group-management/v1.0.0/groups"
           body: "groups"
         };
    }


    rpc updateGroup (org.apache.custos.iam.service.GroupRequest) returns (org.apache.custos.iam.service.GroupRepresentation) {

        option (google.api.http) = {
           put: "/group-management/v1.0.0/group/{id}"
           body: "group"
         };
    }

    rpc deleteGroup (org.apache.custos.iam.service.GroupRequest) returns (org.apache.custos.iam.service.OperationStatus) {

        option (google.api.http) = {
           delete: "/group-management/v1.0.0/group/{id}"
           body: "group"
         };
    }

    rpc findGroup (org.apache.custos.iam.service.GroupRequest) returns (org.apache.custos.iam.service.GroupRepresentation) {

        option (google.api.http) = {
           get: "/group-management/v1.0.0/group"
         };
    }


    rpc getAllGroups (org.apache.custos.iam.service.GroupRequest) returns (org.apache.custos.iam.service.GroupsResponse) {

        option (google.api.http) = {
           get: "/group-management/v1.0.0/groups"
         };
    }

    rpc addUserToGroup (org.apache.custos.iam.service.UserGroupMappingRequest) returns (org.apache.custos.iam.service.OperationStatus) {

        option (google.api.http) = {
           post: "/group-management/v1.0.0/user"
         };
    }


    rpc removeUserFromGroup (org.apache.custos.iam.service.UserGroupMappingRequest) returns (org.apache.custos.iam.service.OperationStatus) {

        option (google.api.http) = {
           delete: "/group-management/v1.0.0/user"
         };
    }

    rpc addChildGroupToParentGroup (org.apache.custos.user.profile.service.GroupToGroupMembership) returns (org.apache.custos.iam.service.OperationStatus) {
        option (google.api.http) = {
           post: "/group-management/v1.0.0/group/membership"
         };

    }
    rpc removeChildGroupFromParentGroup (org.apache.custos.user.profile.service.GroupToGroupMembership) returns (org.apache.custos.iam.service.OperationStatus) {

        option (google.api.http) = {
           delete: "/group-management/v1.0.0/group/membership"
         };
    }

    rpc getAllGroupsOfUser (org.apache.custos.user.profile.service.UserProfileRequest) returns (org.apache.custos.user.profile.service.GetAllGroupsResponse) {

        option (google.api.http) = {
           get: "/group-management/v1.0.0/user/groups/memberships"
         };
    }

    rpc getAllParentGroupsOfGroup (org.apache.custos.user.profile.service.GroupRequest) returns (org.apache.custos.user.profile.service.GetAllGroupsResponse) {
        option (google.api.http) = {
           get: "/group-management/v1.0.0/groups/memberships"
         };

    }


}




